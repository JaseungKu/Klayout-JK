<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Jaseung Ku, Feb 2021
# This PCell turns a path into a CPW, which consists of a center conductor and two gaps. 
# The area of the center conductor and gaps is substrated from any overlapping shape, and then 
# the center conductor area is added, making a PCell.
# Currenly, thic PCell can't be updated since if a parameter changes changed or the guided shape changes, Klayout throws an error.

import pya
import math

class PathToCPWPlus(pya.PCellDeclarationHelper):
  """
  The PCell declaration for PathToCPWPlus.
  """

  def __init__(self):

    # Important: initialize the super class
    super(PathToCPWPlus, self).__init__()

    # declare the parameters
    #self.param("l", self.TypeLayer, "Layer", default = pya.LayerInfo(1, 0))
    self.param("p", self.TypeLayer, "OUTLINE Layer", default = pya.LayerInfo(0, 2))
 #   self.param("k", self.TypeLayer, "KEEPOUT Layer", default = pya.LayerInfo(0, 1))
    self.param("c", self.TypeLayer, "IMAGE Layer", default = pya.LayerInfo(1, 0))
    self.param("s", self.TypeShape, "", default = pya.DPath.new())   # Use "D-type" shapes
    self.param("name", self.TypeString,"CPW name", default='PathToCPWPlus')
    self.param("current_cell_name", self.TypeString,"Current cell name", default="", hidden=True)
        
    # parameters in um 
    self.param("cr", self.TypeDouble, "center conductor radius", default = 100)
    self.param("cw", self.TypeDouble, "c.c width", default = 10)
    self.param("gw", self.TypeDouble, "gap width", default = 6)
#    self.param("kw", self.TypeDouble, "keepout width", default = 5)
    self.param("n", self.TypeInt, "Number of points per 360 degree", default = 360)     
    
  def display_text_impl(self):
    # Provide a descriptive text for the cell
    #return "CPWfromPath(CC width=" + str(self.cw) + ",gap width=" + ('%.3f' % self.gw) + ")"
    return self.name
    
  def coerce_parameters_impl(self):
  
    # We employ coerce_parameters_impl to decide whether the handle or the 
    # numeric parameter has changed (by comparing against the effective 
    # radius ru) and set ru to the effective radius. We also update the 
    # numerical value or the shape, depending on which one has not changed.
    pass
 
  def can_create_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we can use any shape which 
    # has a finite bounding box
    #return self.shape.is_box() or self.shape.is_polygon() or self.shape.is_path()
    return self.shape.is_path()
  
  def parameters_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we set r and l from the shape's 
    # bounding box width and layer
    # self.tmp = self.shape.bbox().width() * self.layout.dbu / 2
    # self.l = self.layout.get_info(self.layer)
    self.s = self.shape.dpath # read selected path obj. dpath in um unit
    self.current_cell_name = self.shape.cell.name

                      
  def transformation_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we use the center of the shape's
    # bounding box to determine the transformation
    return pya.Trans()
       
  def produce_impl(self):
       
    # create three paths based on parameter of selected path
    cc_dpath = self.s.dup() 
    gap_dpath = self.s.dup()
   # keepout_dpath = self.s.dup()
    
    # set width of each path
    cc_dpath.width = self.cw 
    gap_dpath.width = cc_dpath.width + self.gw * 2.0 
    #keepout_dpath.width = gap_dpath.width + self.kw * 2.0  
    
    # round path
    cc_dpath_rounded = cc_dpath.round_corners(self.cr, self.n, self.layout.dbu/2.0)
    gap_dpath_rounded = gap_dpath.round_corners(self.cr, self.n, self.layout.dbu/2.0)
   # keepout_dpath_rounded = keepout_dpath.round_corners(self.cr, self.n, self.layout.dbu/2.0)
    
    # turn path to region to do boolean operation
    cc_region = pya.Region.new(pya.Path.new(cc_dpath_rounded.to_itype(self.layout.dbu)))  # to_itype method to translate the floating-point coordinate path in micron units to an integer-coordinate path in database units.
    gap_region = pya.Region.new(pya.Path.new(gap_dpath_rounded.to_itype(self.layout.dbu)))
   # keepout_region = pya.Region.new(pya.Path.new(keepout_dpath_rounded.to_itype(self.layout.dbu)))
 
    # create center conductor
    self.cell.shapes(self.c_layer).insert(cc_region)
    # self.cell.shapes(self.p_layer).insert(gap_region)     
    # self.cell.shapes(self.k_layer).insert(keepout_region)

    # from user interface, get layout object
    app = pya.Application.instance()
    mw = app.main_window()
    lv = mw.current_view() # layoutview for current layout tab
    cv = lv.active_cellview() # cellview
    ly = cv.layout() # layout object that contains cell shown. layout = collection of cells and geometrical shapes

    #print(ly.cell(self.current_cell_name).cell_index())
    iter = ly.begin_shapes_overlapping(ly.cell(self.current_cell_name).cell_index(), self.c_layer, gap_region.bbox()) #iterator
    num_overlap = 0
    
    while not iter.at_end():
      num_overlap += 1
     # print(iter.shape().shapes())
      shape_to_region = pya.Region.new(iter.shape().shapes()) #      iter.shape()

      iter.shape().shapes().erase(iter.shape())
      iter.shape().shapes().insert(shape_to_region - gap_region)
      
      iter.next()
          
    print(f'Number of overlapping shapes = {num_overlap}')

    </text>
</klayout-macro>
