<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Create Flux Trap</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>macros_menu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
'''
This script is to creatCPWe flux trap holes on FLUX TRAP layer in the selected cell. The flux trap holes are 4x4 um^2 and 8 um apart center-to-center.

Instruction:  1. Select a cell instance. Make sure the origin of the cell is centered!
              2. Run this script.
        
TODO: 1. Make a dialog window that takes the cell_center_x and cell_center_y.
'''  

########### set parameter ######################
cell_center_x = 0 # cell x-coordinate on CHIP
cell_center_y = 0
#################################################

# from user interface, get layout object
app = pya.Application.instance()
mw = app.main_window()
lv = mw.current_view() # layoutview for current layout tab
cv = lv.active_cellview() # cellview
ly = cv.layout() # layout object that contains cell shown. layout = collection of cells and geometrical shapes

imagebbox_layer = ly.layer(0, 3)
keepout_layer = ly.layer(0, 1)
fluxtrap_layer = ly.layer(1, 1)

lv.transaction("make flux trap")

# Get the selected cell instance.
sel = lv.each_object_selected() # Iterate over selected objects and yield ObjectInstPath objects

for obj in sel:
  #cell_selected = obj.inst().cell # cell_selected is the cell the selected instance refers to
  cell_selected = lv.cellview(obj.cv_index).layout().cell(obj.inst().cell_index)  
  # workaround from error: cannot call non-const method on a const reference in Cell.insert
  # Ref: https://www.klayout.de/forum/discussion/1191/cell-shapes-cannot-call-non-const-method-on-a-const-reference

# get image bbox
for shape in cell_selected.each_shape(imagebbox_layer):
  imagebbox = shape # there is only one image bbox in image bbox layer.

imagebbox_height = imagebbox.box.height() # in dbu
imagebbox_width = imagebbox.box.width()
print('imagebbox width, height',imagebbox_width, imagebbox_height)

bbox = cell_selected.bbox() 
bbox_height = bbox.height()
bbox_width = bbox.width()
print('bbox width, height',bbox_width, bbox_height)

# set flux offset
flux_xoffset = -((cell_center_x + 4.0) / ly.dbu) % (8/ly.dbu)
flux_yoffset = -((cell_center_y + 4.0) / ly.dbu) % (8/ly.dbu)
print('flux_xoffset, yoffset', flux_xoffset, flux_yoffset)

# create flux trap array
x_disp = -1 * ((bbox_width/2.0)//(8.0/ly.dbu) + 1) * (8.0/ly.dbu) + flux_xoffset
y_disp = -1 * ((bbox_height/2.0)//(8.0/ly.dbu) +1) * (8.0/ly.dbu) + flux_yoffset
print('x_disp, y_disp', x_disp, y_disp)

# create a unit cell of flux trap holes
if ly.has_cell('flux_trap_single_cell'):
  flux_single = ly.cell('flux_trap_single_cell')
else:
  flux_single = ly.create_cell('flux_trap_single_cell')
  flux_single.shapes(fluxtrap_layer).insert(pya.Box.new(-2000,-2000, 2000,2000))
flux_single_index = flux_single.cell_index()

# create a cell that contains instance array of flux_single.
if ly.has_cell('flux_trap_array'):
  flux_array = ly.cell('flux_trap_array')
  flux_array.clear() # make it empty to reuse
else:
  flux_array = ly.create_cell('flux_trap_array')

# create cell instance array
t = pya.DTrans.new(x_disp, y_disp) 
flux_Cellinstarray = pya.CellInstArray.new(flux_single_index, t) # CellInstArray created.

# set parameters for instance array
nrow = bbox_height // (8.0 / ly.dbu) + 2
ncolumn = bbox_width //  (8.0 / ly.dbu) + 2
print('nrow, ncolumn', nrow, ncolumn)

flux_Cellinstarray.a=(pya.Point(0, 8.0 / ly.dbu))
flux_Cellinstarray.b=(pya.Point(8.0 / ly.dbu,0))
flux_Cellinstarray.na=(nrow)
flux_Cellinstarray.nb=(ncolumn)

# insert cell instance array into flux_array cell.
flux_array.insert(flux_Cellinstarray)
flux_array.flatten(-1, False)

# create region for boolean operation
r1 = pya.Region.new(cell_selected.begin_shapes_rec(imagebbox_layer)) #recursive shape iterator 
r2 = pya.Region.new(cell_selected.begin_shapes_rec(keepout_layer))
r3 = pya.Region.new(flux_array.begin_shapes_rec(fluxtrap_layer))

# boolean operation and add the result into FLUX TRAP layer of the selected cell instance.
r4 = r1 &amp; r3 - r2 # boolean operation r1 &amp; r3 - r2
cell_selected.clear(fluxtrap_layer)
cell_selected.shapes(fluxtrap_layer).insert(r4)

# clean the regions.
r1.clear()
r2.clear()
r3.clear()
r4.clear()


</text>
</klayout-macro>
