<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>flatten_all</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>macros_menu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Jaseung, Apr 2021
# Usage: Select a cell or PCell instance, go to Macro menu and select flatten_all.
# This script flattens all the selected cell to all hiarachy.

import pya

def flatten_all():
  '''
  This script flattens all the selected cell to all hiarachy.

  Instruction
  -----------
   1. Select a cell instance.
   2. Run this script (go to Macro menu).        
  '''  

  # from user interface, get layout object
  app = pya.Application.instance()
  mw = app.main_window()
  lv = mw.current_view() # layoutview for current layout tab
  cv = lv.active_cellview() # cellview
  ly = cv.layout() # layout object that contains cell shown. layout = collection of cells and geometrical shapes

  # This makes undo possible, but undo doesn't always work. 
  lv.transaction("flatten all") 
 
  # Get the selected cell instances.
  sel = lv.each_object_selected() # Iterate over selected objects and yield ObjectInstPath objects.

  # flatten cell instance
  for obj in sel:
    if obj.is_cell_inst():
      print(obj.is_cell_inst())
      selected_cell_inst = obj.inst()
      selected_cell_inst.flatten(-1)

  lv.commit()  
  
# execute function
flatten_all()  </text>
</klayout-macro>
