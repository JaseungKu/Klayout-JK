<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Center cell origin</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>macros_menu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Jaseung, Jan 2020
import pya

def center_cell_origin():
  '''
  This script is to adjust origin to the center of bounding box for selected cell instances.

  Instruction
  -----------
   1. Select cell instances.
   2. Run this script.        
  '''  

  # from user interface, get layout object
  app = pya.Application.instance()
  mw = app.main_window()
  lv = mw.current_view() # layoutview for current layout tab
  cv = lv.active_cellview() # cellview
  ly = cv.layout() # layout object that contains cell shown. layout = collection of cells and geometrical shapes

  # This makes undo possible, but undo doesn't always work. 
  # For example, a cell instance consisting of a box, PathToCPW cell and MeanderCPW doens't work with undo: the box shift when undoing.
  #lv.transaction("Adjust origint to the center") 

  layerlist = ly.layer_indexes()
  
  # Get the selected cell instances.
  sel = lv.each_object_selected() # Iterate over selected objects and yield ObjectInstPath objects.

  for obj in sel:
    if obj.is_cell_inst():
      #cell_selected = obj.inst().cell # cell_selected is the cell the selected instance refers to.
      # workaround from error: cannot call non-const method on a const reference in Cell.insert
      # Ref: https://www.klayout.de/forum/discussion/1191/cell-shapes-cannot-call-non-const-method-on-a-const-reference
      
      # center all shapes inside the cell_selected.
      cell_selected = lv.cellview(obj.cv_index).layout().cell(obj.inst().cell_index)  
      bbox = cell_selected.bbox() 
      center_pnt = bbox.center()
      
      for layer in layerlist:
        shapes = cell_selected.shapes(layer)
        shapes.transform(pya.Trans.new(-center_pnt.x, -center_pnt.y))
      for inst in cell_selected.each_inst():  # find cell instances.
        inst.transform(pya.Trans.new(-center_pnt.x, -center_pnt.y))
        
      # shift the cell instances of the cell_selected in parent instances (equivalent to "Adjust instances in parents" in Edit-&gt;Cell-&gt;Adjust Origin).
      for parent_inst in cell_selected.each_parent_inst():
        parent_inst.child_inst().transform(pya.Trans.new(center_pnt.x, center_pnt.y))

  #lv.commit()  
  
# execute function
center_cell_origin()  </text>
</klayout-macro>
